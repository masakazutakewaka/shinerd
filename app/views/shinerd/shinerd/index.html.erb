<!DOCTYPE html>
<html>
<head>
  <title>Shinerd</title>
  <%= csrf_meta_tags %>

  <%= stylesheet_link_tag    "shinerd/application", media: "all" %>

  <meta charset="utf-8"/>

  <script src="https://d3js.org/d3.v4.js"></script>
  <script src="https://dagrejs.github.io/project/dagre-d3/latest/dagre-d3.min.js"></script>
</head>
<body>
  <div class="node-colors">
    <div>
      selected table :
      <span style="color:orange">orange</span>
    </div>
    <div>
      has many :
      <span style="color:aqua;">aqua</span>
    </div>
    <div>
      has one :
      <span style="color:forestgreen;">green</span>
    </div>
    <div>
      belongs to :
      <span style="color:magenta;">magenta</span>
    </div>
  </div>
  <svg>
    <g/>
  </svg>
</body>
<script>
    // Create the input graph
    var g = new dagreD3.graphlib.Graph({ multigraph: true })
        .setGraph({rankdir: 'LR'})
        .setDefaultEdgeLabel(function() { return {}; });

    <% @nodes.each do |name, html| %>
    g.setNode("<%= name %>",  { labelType: 'html', label: "<%= html.html_safe %>" });
    <% end %>

    <% @edges.each do |e| %>
    g.setEdge("<%= e[:head] %>", "<%= e[:tail] %>", { curve: d3.curveBasis, arrowhead: "feetArrowHead" });
    <% end %>

    var relations = <%= @relations.to_json.html_safe %>

    // Set up an SVG group so that we can translate the final graph.
    var svg = d3.select("svg"),
        svgGroup = svg.append("g");

    // Create the renderer
    var render = new dagreD3.render();

    // Custom arrow
    render.arrows().feetArrowHead = function normal(parent, id, edge, type) {
        var marker = parent.append("marker")
            .attr("id", id)
            .attr("viewBox", "-11 -5 12 10")
            .attr("refX", 0)
            .attr("refY", 0)
            .attr("markerUnits", "strokeWidth")
            .attr("markerWidth", 12)
            .attr("markerHeight", 10)
            .attr("orient", "auto");

        var path = marker.append("path")
            .attr("d", "M 0 0 L -10 0 M 0 4 L -10 0 L 0 -4")
            .style("stroke-width", 1)
            .style("fill", "white")
            .style("stroke", "black");
        dagreD3.util.applyStyle(path, edge[type + "Style"]);
    };

    // Run the renderer. This is what draws the final graph.
    render(d3.select("svg g"), g);

    // Center the graph
    var xCenterOffset = (svg.attr("width") - g.graph().width) / 2;
    svgGroup.attr("transform", "translate(" + xCenterOffset + ", 20)");
    svg.attr("height", window.innerHeight).attr("width", window.innerWidth);
    svg.attr("viewBox",`0 0 ${g.graph().width} ${g.graph().height}`);

    // Set up zoom support(Not working. maybe has something to do with centering the graph in the above code)
    var zoom = d3.zoom().on("zoom", function() {
        svgGroup.attr("transform", d3.event.transform);
    });
    svg.call(zoom);

    // change style of linked nodes and edges when hover
    d3.selectAll('.node')
        .on('mouseenter', function(nodeName){
            activateNodes(nodeName);
        })
        .on('mouseleave', function(){
            deactivateNodes();
        });

    let activateNodes = (nodeName) => {
        activateHasManys(nodeName);
        activateHasOnes(nodeName);
        activateBelongsTos(nodeName);
        activateSelected(nodeName);
    };

    let deactivateNodes = () => {
        d3.selectAll(`.selected`).classed('selected', false);
        d3.selectAll(`.has-many`).classed('has-many', false);
        d3.selectAll(`.has-one`).classed('has-one', false);
        d3.selectAll(`.belongs-to`).classed('belongs-to', false);
    };

    let activateSelected = (nodeName) => {
        d3.select(`.${nodeName}`).classed('selected', true);
    };

    let activateHasManys = (nodeName) => {
        if (relations[nodeName].has_many === undefined) { return }
        Array.from(relations[nodeName].has_many, name => {
            d3.select(`.${name}`).classed('has-many', true);
        });
    };

    let activateHasOnes = (nodeName) => {
        if (relations[nodeName].has_one === undefined) { return }
        Array.from(relations[nodeName].has_one, name => {
            d3.select(`.${name}`).classed('has-one', true);
        });
    };

    let activateBelongsTos = (nodeName) => {
        if (relations[nodeName].belongs_to === undefined) { return }
        Array.from(relations[nodeName].belongs_to, name => {
            d3.select(`.${name}`).classed('belongs-to', true);
        });
    };
</script>
